{"version":3,"sources":["Addtag.js","Nametag.js","Entry.js","Record.js","Total.js","IndividualTransaction.js","PersonalTranscation.js","ParseString.js","InputArea/NewPerson.js","InputArea/NameSelector.js","InputArea/InputArea.js","AppTitle.js","App.js","index.js"],"names":["Addtag","props","addThis","bind","this","add","personName","className","onClick","React","Component","Nametag","removeThis","remove","Entry","state","transactionName","data","amount","personPaid","personUsed","personsUsedItem","handleRemove","removeUser","addUser","removeData","numKey","removePersonUsed","addPersonUsed","ignorePerson","person","remain","validPersonList","slice","owner","entryNum","map","user","filter","name","Record","record","type","transactionsign","Math","round","sharedWith","Total","total","IndividualTransaction","Name","Records","records","getListOfRecords","getTotal","totalCount","alert","PersonalTranscations","statements","statement","is_number","i","is_playerName","x","playerName","undefined","char","is_amount","j","NewPerson","ev","newPersonName","NameSelector","textAreaText","personList","handlePersonAdd","handleTextAreaChange","removePerson","handleEnterKey","includes","toUpperCase","setState","push","updatePersonList","e","keyCode","preventDefault","target","value","filtered","isIgnore","onChange","onKeyDown","InputArea","updateIgnorePerson","textAreaTextEntry","handleSubmit","Title","App","keyCount","finaStatement","textEntry","getListFromData","getEntriesFromParseString","updateFinaStatement","fromTransactionsToStatement","newPersonList","ignorePersonList","temp","personArray","line","key","personListCheck","length","currentObject","expecting","amountResult","parseFloat","playerResult","trim","transactionNameCaps","containsName","validName","Parse","finaStatements","PersonalTranscation","statementArray","item","tempArr","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31d583d8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Addtag extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.addThis = this.addThis.bind(this);\r\n    }\r\n\r\n    addThis(){\r\n        this.props.add(this.props.personName);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <button className=\"AddTag\" onClick = {this.addThis}>\r\n                <div className = \"AddTagName\">{this.props.personName}</div>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Addtag; ","import React from \"react\";\r\n\r\nclass Nametag extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.removeThis = this.removeThis.bind(this);\r\n    }\r\n\r\n    removeThis(){\r\n        this.props.remove(this.props.personName);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"name-tag\">\r\n                <div className = \"name-tag-name\">\r\n                    {this.props.personName}\r\n                </div>\r\n                <button className = \"name-tag-remove-button\" onClick = {this.removeThis}>X</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nametag; ","import React from \"react\";\r\nimport Addtag from \"./Addtag\";\r\nimport Nametag from \"./Nametag\";\r\n\r\nclass Entry extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionName: props.data.transactionName,     //Done\r\n            amount: props.data.amount,                       //Done\r\n            personPaid: props.data.personPaid,               //Done\r\n            personUsed: props.data.personsUsedItem,      \r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.removeUser = this.removeUser.bind(this);\r\n        this.addUser = this.addUser.bind(this);\r\n    }\r\n\r\n    handleRemove() {\r\n        // alert(this.state.entryName); \r\n        this.props.removeData(this.props.numKey);\r\n    }\r\n\r\n    removeUser(personName){\r\n        this.props.removePersonUsed(this.props.numKey, personName);\r\n    }\r\n\r\n    addUser(personName){\r\n        this.props.addPersonUsed(this.props.numKey, personName);\r\n    }\r\n\r\n    /**\r\n     * MODIFY DEFAULT BEHAVIOR HERE\r\n     * The function removes a person from the entry on load\r\n     * Used when a person should be ignored from all entry\r\n     */\r\n    componentDidMount(){\r\n        //REFACTOR: Put this function in ParseString for better performance\r\n        for(let person of this.props.ignorePerson){\r\n            this.removeUser(person); \r\n        }\r\n    }\r\n\r\n    render(){\r\n        let remain = this.props.validPersonList.slice(); \r\n        return(\r\n            <div className = \"transaction-entry\" owner = {this.state.personPaid}>\r\n                <div className = \"UpperBox\">\r\n                    <div className = \"TitleAndOwner\">\r\n                        <div className = \"EntryName\">Item {this.props.entryNum}: <span>{this.state.transactionName}</span></div>\r\n                        <div className = \"OwnedBy\">Paid By: <span>{this.state.personPaid}</span></div>\r\n                    </div>\r\n                    <div className = \"PersonUsed\">\r\n                    {\r\n                        this.props.data.personsUsedItem.map((user)=>{\r\n                            remain = remain.filter(name => name !== user); \r\n                            return (\r\n                                <Nametag personName = {user} remove = {this.removeUser}/>\r\n                            )\r\n                        })\r\n                    }\r\n                    {\r\n                        remain.map((user)=>{\r\n                            return (\r\n                                <Addtag personName = {user} add = {this.addUser} />\r\n                            )\r\n                        })\r\n                    }\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n                \r\n                <div className = \"AmountAndDelete\">\r\n                        <div className = \"Amount\">$<span>{this.state.amount}</span>  </div>\r\n                        <button onClick = {this.handleRemove}>X</button>\r\n                </div>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Entry;","import React from \"react\";\r\n\r\n/*\r\n    Record:\r\n    {\r\n        transactionName: data.transactionName,\r\n        amount: data.amount,\r\n        type: \"Paid For\"\r\n    }\r\n    deltaTotal: deltaTotal()\r\n */\r\n\r\nclass Record extends React.Component{\r\n\r\n    // componentDidMount(){\r\n    //     this.props.deltaTotal(this.props.record.amount);\r\n    //     //console.log(this.props.record.transactionName + \" Updated Balance of \" + this.props.record.amount);\r\n    // }\r\n\r\n    // componentWillUnmount(){\r\n    //     this.props.deltaTotal(-this.props.record.amount);\r\n    //     //console.log(this.props.record.transactionName + \" Updated Balance of \" + (-this.props.record.amount));\r\n    // }\r\n    \r\n    render(){\r\n        if(this.props.record.type === \"paidFor\"){\r\n            return(\r\n                <div className = \"Record\" transactionsign = \"positive\">\r\n                    <div className = \"RecordNameAndShare\">\r\n                        <div className = \"RecordTransactionName\">{this.props.record.transactionName}</div>\r\n                    </div>\r\n                    <div className = \"RecordAmountAndCross\">\r\n                        <div className = \"RecordAmount\">+{Math.round(this.props.record.amount * 100)/100}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        //All negative transaction\r\n        else if(this.props.record.sharedWith > 1){\r\n            return(\r\n                <div className = \"Record\" transactionsign = \"negative\">\r\n                    <div className = \"RecordNameAndShare\">\r\n                        <div className = \"RecordTransactionName\">{this.props.record.transactionName}</div>\r\n                        <div className = \"SharedWith\">\r\n                            <div>Original: <span>{Math.round(this.props.record.amount*this.props.record.sharedWith)}</span></div>\r\n                            <div>Shared with <span>{this.props.record.sharedWith - 1}</span> other people</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"RecordAmountAndCross\">\r\n                        <div className = \"RecordAmount\">{Math.round(this.props.record.amount * 100)/100}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div className = \"Record\" transactionsign = \"negative\">\r\n                    <div className = \"RecordNameAndShare\">\r\n                        <div className = \"RecordTransactionName\">{this.props.record.transactionName}</div>\r\n                    </div>\r\n                    <div className = \"RecordAmountAndCross\">\r\n                        <div className = \"RecordAmount\">{Math.round(this.props.record.amount * 100)/100}</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n            \r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default Record; ","import React from \"react\";\r\n\r\nfunction Total(props){\r\n    if(props.total >= 0){\r\n        return(\r\n            <div className = \"Total\">\r\n                <div className = \"TotalDescription\">Should <span>Receive: </span></div>\r\n                <div className = \"TotalAmount\">{props.total}</div>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <div className = \"Total\">\r\n                <div className = \"TotalDescription\">Should <span>Pay: </span></div>\r\n                <div className = \"TotalAmount\">{-props.total}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Total; ","import React from \"react\";\r\nimport Record from \"./Record\";\r\nimport Total from \"./Total\";\r\n\r\nclass IndividualTransaction extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            Name: this.props.personName,\r\n            Records: this.props.records,\r\n            /**\r\n             * {\r\n              transactionName: data.transactionName,\r\n              amount: data.amount,\r\n              type: \"Paid For\"\r\n                }\r\n             */\r\n            Total: 0,\r\n        }\r\n        //this.deltaTotal = this.deltaTotal.bind(this);\r\n        this.getListOfRecords = this.getListOfRecords.bind(this);\r\n        this.getTotal = this.getTotal.bind(this);\r\n    }\r\n\r\n    // deltaTotal(delta){\r\n    //     this.setState((state)=>{\r\n    //         return({Total: state.Total += delta});\r\n    //     })\r\n    // }\r\n\r\n    getListOfRecords(){\r\n        let listRecord = this.props.records.map((record) => {\r\n            return(\r\n                <Record record={record}></Record>//MORE TO DO HERE\r\n            )\r\n        })\r\n        return listRecord;\r\n    }\r\n\r\n    /**\r\n     * Return the amount a person owns/owes depending on what passed on this.props.record\r\n     * @returns the total amount a person owns / owes\r\n     */\r\n    getTotal(){\r\n        let totalCount = 0; \r\n        this.props.records.map((record) => {\r\n            //Might be redundent\r\n            if (typeof(record.amount) !== 'number'){\r\n                alert(\"ERROR: IndividiualTransaction.js getTotal(): record.amount is not a number\");\r\n                return false; \r\n            }\r\n            totalCount += record.amount;\r\n        })\r\n        return totalCount;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"IndividualTransaction\">\r\n                <div className = \"PersonName\">{this.state.Name}</div>\r\n                <div className = \"Records\">{this.getListOfRecords()}</div>\r\n                <Total total = {Math.round(this.getTotal()*100)/100} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default IndividualTransaction;","import React from \"react\";\r\nimport IndividualTransaction from \"./IndividualTransaction\";\r\n\r\nclass PersonalTranscations extends React.Component{\r\n    // constructor(props){\r\n    //     super(props); \r\n    // }\r\n\r\n    // render(){\r\n    //     let transactionList = this.props.personObj.finaStatement.map((transaction) => {\r\n    //         return(\r\n    //             <div>\r\n    //                 <p>Transaction: {transaction.transactionName}</p>\r\n    //                 <p>Amount: ${transaction.amount}</p>\r\n    //             </div>\r\n                \r\n    //         )\r\n    //     })\r\n    //     return(\r\n    //         <div className = \"PersonalTransactionRecord\">\r\n    //             <div>Name: {this.props.personObj.name}</div>\r\n    //             <div>Balance: {this.props.personObj.balance}</div>\r\n    //             <div>{transactionList}</div>\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    /*\r\n    props: Array of (\r\n        {\r\n        personName: person,\r\n        records: [],\r\n        }\r\n    )\r\n    */\r\n    constructor(props){\r\n        super(props); \r\n        this.state = {\r\n            statements: this.props.statements,\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let statementList = this.props.statements.map((statement)=> {\r\n            return(\r\n            <IndividualTransaction personName = {statement.personName} records = {statement.records}></IndividualTransaction>\r\n            )\r\n        })\r\n        return(statementList);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default PersonalTranscations;","\r\n/**\r\n * Parse string from typeArea and returns an object as follows:\r\n * \r\n * \r\n * @param {string} x Captured from the typeArea\r\n * @param {*} personArray An array of all valid person name\r\n * @returns false if the string passed is not valid, array of object otherwise\r\n */\r\n\r\nexport function ParseString(x, personArray){\r\n    let i = 0; \r\n    let line = 0; \r\n    let data = [];\r\n    let key = 0;\r\n    let personListCheck = personArray.map((person)=> {\r\n        return person.toUpperCase(); \r\n    } )\r\n    //console.log(personListCheck);\r\n\r\n\r\n    while (i < x.length) {\r\n        //Enter here every newline\r\n        if(x[i] === '\\n'){\r\n            //console.log(\"Empty Line on line \" + line);\r\n            i++;\r\n            line++;\r\n            continue;\r\n        }\r\n        \r\n        let transactionName = '';\r\n        let currentObject = {\r\n            transactionName: \"\",\r\n            amount: \"\",\r\n            personPaid: \"\",\r\n            personsUsedItem: [],\r\n            key: undefined, \r\n        }\r\n\r\n        let expecting = \"amount\";\r\n\r\n        while (x[i] !== '\\n' && i < x.length) {\r\n            let char = x[i];\r\n\r\n            //Encountered number, where i is the beginning index of the number\r\n            if (is_number(char)) {\r\n                //Go forward to check whether it is a \"price\"\r\n                let amountResult = is_amount(x, i);\r\n                if (amountResult !== false) {\r\n                    //Not expecting amount: \r\n                    if (expecting !== \"amount\") {\r\n                        alert(\"Line \" + line + \" (\" + transactionName + \") : Expected '\" + expecting + \"' While received amount\");\r\n                        return false;\r\n                    }\r\n                    \r\n                    currentObject.amount = parseFloat(amountResult);\r\n                    i += amountResult.length;\r\n                    expecting = \"player\";\r\n                    continue;\r\n                }\r\n            }\r\n            //Encountered a player's name\r\n            if (char === \"(\" || char === \"（\") {\r\n                let playerResult = is_playerName(x, i);\r\n                if (playerResult === false) {\r\n                    //Throw error;\r\n                    alert(\"Line \" + line + \" (\" + transactionName + \") : Invalid Name format encountered after '('\");\r\n                    return;\r\n                }\r\n                else {\r\n                    //Player identified\r\n                    //If not expecting player\r\n                    if (expecting !== \"player\") {\r\n                        alert(\"Line \" + line + \" (\" + transactionName + \") : Expected '\" + expecting + \"' While received name of person who paid\");\r\n                        return false;\r\n                    }\r\n\r\n                    //If expecting player\r\n                    if(!personListCheck.includes(playerResult.toUpperCase())){\r\n                        alert(\"Line \" + line + \" (\" + transactionName + \") : Encountered Unidentified Person: '\" + playerResult + \"'\");\r\n                        return false;\r\n                    }\r\n                    currentObject.personPaid = playerResult; \r\n                    i += (playerResult.length + 2);\r\n                    expecting = \"newline\";\r\n                    continue;\r\n                }\r\n            }\r\n            //Assumed to be transaction name:\r\n            if (expecting === \"amount\") {\r\n                transactionName += char;\r\n            }\r\n\r\n            i++;\r\n        }\r\n        //Encountered newline symbol\r\n\r\n        if (expecting === \"amount\"){\r\n            alert(\"Line \" + line + \" (\" + transactionName + \") : Has no transaction amount\");\r\n            return false;\r\n        }\r\n\r\n        if (expecting === \"player\"){\r\n            alert(\"Line \" + line + \" (\" + transactionName + \") : Has no name of person paid. Please make sure the payer's name is wrapped in brackets. E.g. (John)\");\r\n            return false;\r\n        }\r\n\r\n        if(transactionName === \"\"){\r\n            alert(\"Line \" + line + \": Has no transaction name\")\r\n        }\r\n\r\n        line++; \r\n        \r\n\r\n        currentObject.transactionName = transactionName.trim(); \r\n\r\n        //Modifying personsUsedItem depending on the content in the transactionName.\r\n        let transactionNameCaps = currentObject.transactionName.toUpperCase(); \r\n        let containsName = false; \r\n\r\n        for(let validName of personArray){\r\n            if (transactionNameCaps.includes(validName.toUpperCase())){\r\n                containsName = true;\r\n                currentObject.personsUsedItem.push(validName);\r\n            }\r\n        }\r\n\r\n        if(containsName === false){\r\n            currentObject.personsUsedItem = personArray;\r\n        }\r\n\r\n        \r\n        currentObject.key = key; \r\n        key++;\r\n\r\n        data.push(currentObject);\r\n        \r\n        i++;\r\n    }\r\n    //console.log(data);\r\n    return data;\r\n\r\n    // while(i < x.length){\r\n\r\n    //     let char = x[i];\r\n\r\n    //     //React end of line, push the newly generated object into the array\r\n    //     if(char === \"\\n\"){\r\n    //         line++; \r\n    //         expecting = \"amount\";\r\n    //         console.log(\"Identified Transaction: \" + transactionName);\r\n    //         transactionName = '';\r\n    //         i++; \r\n    //         continue;\r\n    //     }\r\n    //     //Encountered number, where i is the beginning index of the number\r\n    //     if(is_number(char)){\r\n    //         //Go forward to check whether it is a \"price\"\r\n    //         let amountResult = is_amount(x, i);\r\n    //         if(amountResult !== false){\r\n    //             //Amount identified TODO\r\n    //             if(expecting != \"amount\"){\r\n    //                 alert(\"Line \" + line + \": Expected '\" + expecting + \"' While received amount\");\r\n    //                 return;\r\n    //             }\r\n    //             console.log(\"Identified Amount: \" + amountResult);\r\n    //             i += amountResult.length;\r\n    //             expecting = \"player\";\r\n    //             continue;\r\n    //         }\r\n    //     }\r\n    //     //Encountered a player's name\r\n    //     if(char === \"(\"){\r\n    //         let playerResult = is_playerName(x, i);\r\n    //         if(playerResult === false){\r\n    //             //Throw error;\r\n    //             console.log(\"PLAYER ERROR!\")\r\n    //             return;\r\n    //         }\r\n    //         else{\r\n    //             //Player identified TODO\r\n    //             if(expecting != \"player\"){\r\n    //                 alert(\"Line \" + line + \": Expected '\" + expecting + \"' While received name of person who paid\");\r\n    //                 return;\r\n    //             }\r\n    //             console.log(\"Identified Player: \" + playerResult);\r\n    //             i += (playerResult.length + 2);\r\n    //             expecting = \"newline\";\r\n    //             continue;\r\n    //         }\r\n    //     }\r\n    //     //Assumed to be transaction name:\r\n    //     if(expecting === \"amount\"){\r\n    //         transactionName += char; \r\n    //     }\r\n\r\n    //     i++; \r\n\r\n    // }\r\n}\r\n\r\n/**\r\n * Identify whether the character passed is a number\r\n * \r\n * @param {char} i character to be checked \r\n * @returns whether the character is a number or a decimal point\r\n */\r\n\r\nexport function is_number(i){\r\n    return(i === '0' || i === '1' || i === '2' || i === '3' || i === '4' || i === '5' || i === '6' || i === '7' || i === '8' || i === '9' || i === \".\" || i === \"$\");\r\n}\r\n\r\n// APPLE   341  (Tommy)\r\n/**\r\n * Check whether the char in the given position is a player name\r\n * \r\n * @param {String[]} x Entire string to be checked\r\n * @param {Number} i Position of the first player character: Opening bracket\r\n * @returns Player String is a player is identified, false if otherwise\r\n */\r\nexport function is_playerName(x, i){\r\n    if(x[i] !== \"(\" && x[i] !== \"（\"){\r\n        return false; \r\n    }\r\n    i++;\r\n    let playerName = \"\";\r\n    while(x[i] !== undefined){\r\n        let char = x[i];\r\n        if(char === \" \"){\r\n            i++;\r\n        }\r\n        else if(char === \")\" || char === \"）\"){\r\n            //PlayerName is terminated with )\r\n            return playerName;\r\n        }\r\n        else if(char === \"(\" || char === \"（\"){\r\n            //Duplicated (\r\n            return false;\r\n        }\r\n        else if(char === '\\n'){\r\n            //Unexpected newline\r\n            return false; \r\n        }\r\n        else{\r\n            //Got proper character:\r\n            playerName+= char; \r\n            i++; \r\n        }\r\n    }\r\n    return false; \r\n    //x[i] encountered to be undefined\r\n}\r\n\r\n/**\r\n * Check whether the number is the position given is a ledger amount\r\n * \r\n * @param {String[]} x Entire string to be checked\r\n * @param {Number} i Position of the first number character\r\n * @returns Whether the number at the given position is a ledger amount: False/Amount\r\n */\r\nexport function is_amount(x, i){\r\n    //The first character must be a number\r\n    if(!is_number(x[i])){\r\n        return false;\r\n    }\r\n    let amount = ''; \r\n    while(x[i] !== undefined){\r\n        let char = x[i];\r\n        if(!is_number(char)){\r\n            //If x[i] is not a number\r\n            if(char === ' '){\r\n                //If char is spacebar:\r\n                //Go forward until encounter a \"(\"\r\n                let j = i + 1; \r\n                while(true){\r\n                    if(x[j] === ' '){\r\n                        j++;\r\n                        continue;\r\n                    }\r\n                    else if(x[j] === \"(\" || x[j] === \"（\"){\r\n                        //Spacebar until (\r\n                        return amount; \r\n                    }\r\n                    else if(is_number(x[j])){\r\n                        //Not a number: {Num}{Space*N}{Num}\r\n                        return false;\r\n                    }\r\n                    else{\r\n                        //Not a number: {Num}{Space*N}{Letter/Undef}\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n            }\r\n            else{\r\n                if(char === \"(\" || char === \"（\"){\r\n                    //Spacebar until (\r\n                    return amount; \r\n                }\r\n                else{\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            //The current char is a number\r\n            //Append the current char to the amount\r\n            amount += char; \r\n            i++; \r\n        }\r\n    }\r\n    //Reached Undefined\r\n    return false;\r\n}","import React from 'react';\r\n\r\nclass NewPerson extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.removeThis = this.removeThis.bind(this);\r\n    }\r\n\r\n    removeThis(ev){\r\n        this.props.removeThis(this.props.newPersonName);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"new-person\">\r\n                <div className='new-person-name'><span>{this.props.newPersonName}</span></div>\r\n                <button onClick = {this.removeThis}>X</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewPerson; ","import React from \"react\";\r\nimport NewPerson from \"./NewPerson\";\r\n\r\nclass NameSelector extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            textAreaText: \"\",\r\n            personList: [], \r\n        }\r\n\r\n        this.handlePersonAdd = this.handlePersonAdd.bind(this); \r\n        this.handleTextAreaChange = this.handleTextAreaChange.bind(this);\r\n        this.removePerson = this.removePerson.bind(this);\r\n        this.handleEnterKey = this.handleEnterKey.bind(this);\r\n    }\r\n\r\n    /**\r\n     * This function add the name in the name input to both the name selector state and the app state. \r\n     * This function is triggered every time the + button is added.\r\n     */\r\n    handlePersonAdd(){\r\n        let name = this.state.textAreaText;\r\n        if(this.state.personList.includes(name.toUpperCase())){\r\n            alert(\"Person to add already exist.\");\r\n        } else {\r\n            this.setState((state)=>{\r\n                return{ \r\n                    textAreaText: \"\", \r\n                    data: state.personList.push(name.toUpperCase()) \r\n                };\r\n            }, () => {\r\n                //Updating the outer app state.\r\n                this.props.updatePersonList(this.state.personList);\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEnterKey(e){\r\n        if(e.keyCode === 13){\r\n            e.preventDefault(); \r\n            this.handlePersonAdd(); \r\n        }\r\n    }\r\n\r\n    handleTextAreaChange(ev) { this.setState(\r\n        {textAreaText: ev.target.value}\r\n    )}\r\n\r\n    /**\r\n     * Removes a person by string. \r\n     * \r\n     * This function removes a person from the name selector state, as well as the outer app state. \r\n     * This function is passed down to NewPerson, and triggered when the \"X\" button is pressed. \r\n     * @param {string} personName \r\n     */\r\n    removePerson(personName){\r\n        this.setState(\r\n          function(state) {\r\n            let originalPersonList = state.personList;\r\n            let filtered = originalPersonList.filter(function(name){\r\n                return name !== personName;\r\n            })\r\n            //Updating the outer app state. \r\n            this.props.updatePersonList(filtered);\r\n            return(\r\n                {personList: filtered}\r\n            )\r\n          }\r\n        )\r\n    }\r\n\r\n    render(){\r\n        //Indicated whether this entry is for entering ignore person\r\n        if(this.props.isIgnore){\r\n            return(\r\n                <div className = \"NameSelector name-selector-ignore\">\r\n                    <div className = \"name-entry-prompt name-entry-prompt-ignore\">\r\n                        The following names will be ignored from all transcations. <br></br>\r\n                        i.e. They did not use any of the ledger items. <br></br>\r\n                        You can still add their names back to individual entries later. <br></br>\r\n                    </div>\r\n                    <div className = \"name-entry-prompt\">\r\n                        Enter the names to ignore:\r\n                    </div>\r\n                    <div className=\"name-entry\">\r\n                        <textarea onChange = {this.handleTextAreaChange} value = {this.state.textAreaText} onKeyDown={this.handleEnterKey}></textarea>\r\n                        <button className = \"ledger-button\" onClick = {this.handlePersonAdd}><span>+</span></button>\r\n                    </div>\r\n                    <div className=\"new-name-list\">\r\n                        {\r\n                            this.state.personList.map((personName) => {\r\n                                return(\r\n                                    <NewPerson newPersonName = {personName} removeThis = {this.removePerson}></NewPerson>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <div className = \"NameSelector\">\r\n                    <div className = \"name-entry-prompt\">\r\n                        Enter the names to look for:\r\n                    </div>\r\n                    <div className=\"name-entry\">\r\n                        <textarea onChange = {this.handleTextAreaChange} value = {this.state.textAreaText} onKeyDown={this.handleEnterKey}></textarea>\r\n                        <button className = \"ledger-button\" onClick = {this.handlePersonAdd}><span>+</span></button>\r\n                    </div>\r\n                    <div className=\"new-name-list\">\r\n                        {\r\n                            this.state.personList.map((personName) => {\r\n                                return(\r\n                                    <NewPerson newPersonName = {personName} removeThis = {this.removePerson}></NewPerson>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default NameSelector; ","import React from \"react\";\r\nimport NameSelector from \"./NameSelector\";\r\n\r\nclass InputArea extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"MainTextAreaDiv\">\r\n                <NameSelector updatePersonList = {this.props.updatePersonList} isIgnore = {false}/>    \r\n                <NameSelector updatePersonList = {this.props.updateIgnorePerson} isIgnore = {true}/>   \r\n                <div className=\"main-text-area\">\r\n                    <div className = \"main-text-area-prompt\">\r\n                        Copy and Paste transcation record here: \r\n                    </div>\r\n                    <textarea className = \"MainTextArea\" value = {this.props.textAreaTextEntry} onChange = {this.props.handleTextAreaChange}></textarea>\r\n                </div>\r\n                <button className = \"SubmitButton ledger-button\" onClick = {this.props.handleSubmit}>Submit</button>\r\n            </div>\r\n        )\r\n    } \r\n\r\n}\r\n\r\nexport default InputArea; ","function Title(props){\r\n    return (\r\n        <div className = \"AppHeader\">\r\n            <div className = \"AppTitle\">Ledger App</div>\r\n            <div className = \"AppSubTitle\">A React Application, Produced by Saber Athena</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\nimport './App.css';\nimport './NameTag.css';\nimport './Individual.css';\nimport './AppHeader.css';\nimport './InputArea/InputArea.css';\nimport \"./InputArea/NewPerson.css\"\nimport Entry from './Entry';\nimport PersonalTranscations from './PersonalTranscation';\nimport * as Parse from \"./ParseString\"; \nimport InputArea from './InputArea/InputArea';\nimport Title from './AppTitle';\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.keyCount = 0;  //Redun?\n    this.personList = [\"Fox\", \"Tommy\", \"Rex\"];\n    this.state = {\n      personList : [],     //PersonList is created by Update Person List\n      data: [],\n      finaStatement: [],    //?\n      textEntry: \"\",\n      ignorePerson: [],\n    }\n\n    //Adding unique keys to the objects\n    this.updatePersonList = this.updatePersonList.bind(this); \n    this.updateIgnorePerson = this.updateIgnorePerson.bind(this); \n    this.getListFromData = this.getEntriesFromParseString.bind(this);\n    this.removeData = this.removeData.bind(this); \n    this.updateFinaStatement = this.updateFinaStatement.bind(this);\n    this.handleTextAreaChange = this.handleTextAreaChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fromTransactionsToStatement = this.fromTransactionsToStatement.bind(this);\n    this.removePersonUsed = this.removePersonUsed.bind(this);\n    this.addPersonUsed = this.addPersonUsed.bind(this); \n    \n  }\n\n  handleTextAreaChange(ev) { this.setState(\n    {textEntry: ev.target.value}\n  )}\n\n  /**\n   * Passed down to `handlePersonAdd()` of name selector\n   * Updates the person list of app state. \n   * @param {List} newPersonList \n   */\n  updatePersonList(newPersonList) {\n    this.setState(\n      {personList: newPersonList}\n    );\n  }\n\n  updateIgnorePerson(ignorePersonList){\n    this.setState(\n      {ignorePerson: ignorePersonList}\n    );\n  }\n\n  handleSubmit() {\n    let temp; \n    temp = Parse.ParseString(this.state.textEntry, this.state.personList); \n    if (temp === false){\n      return;\n    }\n    // for(let entry of temp){\n    //   entry.personsUsedItem = this.state.personList;\n    // }\n    //Parse.ParseString(this.state.textEntry);\n    this.setState(\n        {data: temp}\n    );\n    //console.log(temp);\n  }\n\n  getEntriesFromParseString(){\n    let entryNum = 0; \n    let list = this.state.data.map((data)=>{\n      //this.keyCount++;\n      entryNum++; \n      return(<Entry \n        data = {data} \n        key = {data.key} \n        validPersonList = {this.state.personList} \n        numKey = {data.key} \n        entryNum = {entryNum} \n        ignorePerson = {this.state.ignorePerson}\n        removeData = {this.removeData} \n        removePersonUsed = {this.removePersonUsed} \n        addPersonUsed = {this.addPersonUsed}\n        />)\n    })\n    return list; \n  }\n\n  updateFinaStatement(){\n    let finaStatements = this.fromTransactionsToStatement();\n    //console.log(finaStatements)\n    this.setState({finaStatement: <PersonalTranscations statements = {finaStatements}></PersonalTranscations>});\n  }\n\n  /**\n   * Generate personalized statements from the list of transactions in the state\n   * @returns an array of objects representing the transaction record of a person\n   */\n  fromTransactionsToStatement(){\n    // {\n    //   transactionName: \"\",\n    //   amount: \"\",\n    //   personPaid: \"\",\n    //   personsUsedItem: [],\n    //   key: undefined, \n    // }\n    let statementArray = []; \n\n    for(let person of this.state.personList)\n    {\n      let statement = {\n        personName: person,\n        records: [],\n      }\n      statement.personName = person;    //Strings in personArray\n      for(let data of this.state.data){\n        if(data.personPaid.toUpperCase() === person.toUpperCase()){    //Validity of person to be enforced later\n          statement.records.push(\n            {\n              transactionName: data.transactionName,\n              amount: data.amount,\n              type: \"paidFor\",\n              sharedWith: undefined,\n            }\n          )\n        }\n        if(data.personsUsedItem.includes(person)){\n          statement.records.push(\n            {\n              transactionName: data.transactionName,\n              amount: -(data.amount/data.personsUsedItem.length),\n              type: \"used\",\n              sharedWith: data.personsUsedItem.length, \n            }\n          )\n        }\n      }\n\n      statementArray.push(statement);\n    }\n    //console.log(statementArray);\n    return statementArray;\n  }\n\n  /**\n   * Removes an entry from this data list using the unqiue key\n   * @param {number} key \n   */\n  removeData(key){\n    //Probably has better way to do this\n    this.setState((state)=>{\n      let temp = state.data.filter(item => item.key !== key);\n      return{ data: temp };\n    })\n  }\n\n  /**\n   * Removes a person from the User List of an entry\n   * This function modifies the \"data\" field of the state\n   * @param {num} key \n   * @param {String} personName \n   */\n  removePersonUsed(key, personName){\n    this.setState(\n      function(state) {\n        let temp = state.data;\n        for (let data of temp){\n          //Find the Entry to be modified\n          if(data.key === key){\n            //Located entry to be modified\n            //Now find the person to be removed\n            for(let i = 0; i < data.personsUsedItem.length; i++){\n              if(data.personsUsedItem[i] === personName){\n                let tempArr = [];\n                for(let j = 0; j < data.personsUsedItem.length; j++){\n                  if(j !== i){\n                    tempArr.push(data.personsUsedItem[j]);\n                  }\n                }\n                data.personsUsedItem = tempArr; \n                return {\n                  data: temp\n                }; \n              }\n            }\n          }\n        }\n      }\n    )\n  }\n\n  /**\n   * Adds a person from the User List of an entry\n   * This function modifies the \"data\" field of the state\n   * @param {num} key \n   * @param {String} personName \n   */\n  addPersonUsed(key, personName){\n    this.setState(\n      function(state) {\n        let temp = state.data;\n        for (let data of temp){\n          //Find the Entry to be modified\n          if(data.key === key){\n            if(data.personsUsedItem.includes(personName)){\n            } else {\n              data.personsUsedItem.push(personName); \n              break; \n            }\n          }\n        }\n        return {\n          data: temp\n        }\n      }\n    )\n  }\n\n  // <textarea value = {this.state.textEntry} onChange = {this.handleTextAreaChange}></textarea>\n  // <button onClick = {this.handleSubmit}>Submit</button>\n\n  render(){\n    return(\n      <div className = \"app\">\n        <Title/>\n        <InputArea \n          handleTextAreaChange = {this.handleTextAreaChange} \n          handleSubmit = {this.handleSubmit} \n          textAreaTextEntry = {this.state.textEntry}\n          updatePersonList = {this.updatePersonList}\n          updateIgnorePerson = {this.updateIgnorePerson}\n          />\n        <div className = \"TransactionList\">\n          {this.getEntriesFromParseString(this.data)}\n        </div>\n        <button className = \"ledger-button update-button\" onClick = {this.updateFinaStatement}>UPDATE</button>\n        <div className = \"FinaStatements\">\n          {this.state.finaStatement}\n        </div>\n      </div>  \n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}